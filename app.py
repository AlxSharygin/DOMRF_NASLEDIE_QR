from flask import Flask, send_file, request
import qrcode
import os

app = Flask(__name__)

COUNTER_FILE = "counter.txt"

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å—á—ë—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(COUNTER_FILE):
    with open(COUNTER_FILE, "w") as f:
        f.write("0")


def read_counter():
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(COUNTER_FILE, "r") as f:
            content = f.read().strip()
            return int(content) if content else 0
    except Exception:
        return 0


def write_counter(value):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open(COUNTER_FILE, "w") as f:
            f.write(str(value))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—á—ë—Ç—á–∏–∫–∞: {e}")


@app.route('/')
def index():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥, –≤–µ–¥—É—â–∏–π –Ω–∞ /track
    track_url = request.url_root + "track"
    qr = qrcode.make(track_url)
    qr_path = "qrcode.png"
    qr.save(qr_path)

    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
    reset_url = request.url_root + "reset"
    current_count = read_counter()

    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>QR Tracker</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; text-align: center; padding: 50px; }}
            img {{ margin: 20px; border: 1px solid #ddd; border-radius: 8px; }}
            a {{ color: #007BFF; text-decoration: none; }}
            a:hover {{ text-decoration: underline; }}
        </style>
    </head>
    <body>
        <h1>üìä QR-–∫–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</h1>
        <img src="/qrcode.png" alt="QR Code" width="250" />
        <p><strong>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {current_count}</strong></p>
        <p><a href="{reset_url}">üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫</a></p>
        <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: <br>
           <a href="{track_url}">{track_url}</a></p>
    </body>
    </html>
    """


@app.route('/qrcode.png')
def serve_qr():
    """–û—Ç–¥–∞—ë–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QR-–∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    return send_file("qrcode.png", mimetype='image/png')


@app.route('/track')
def track():
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    count = read_counter()
    count += 1
    write_counter(count)

    return f"""
    <!DOCTYPE html>
    <html>
    <head><title>–ü–µ—Ä–µ—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω</title><meta charset="utf-8"></head>
    <body style="text-align:center; padding:50px; font-family:Arial;">
        <h2>‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!</h2>
        <p><strong>–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {count}</strong></p>
        <p><a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
    </body>
    </html>
    """


@app.route('/reset')
def reset():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –≤ 0"""
    write_counter(0)
    return """
    <!DOCTYPE html>
    <html>
    <head><title>–°—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω</title><meta charset="utf-8"></head>
    <body style="text-align:center; padding:50px; font-family:Arial;">
        <h2>üîÑ –°—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</h2>
        <p><a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
    </body>
    </html>
    """


# ‚ùó –í–ê–ñ–ù–û: –ù–ï –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–´–í–ê–¢–¨ app.run() ‚Äî Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Gunicorn/Waitress
# if __name__ == '__main__':
#     port = int(os.environ.get('PORT', 5000))
#     app.run(host='0.0.0.0', port=port, debug=False)
